// Code generated by MockGen. DO NOT EDIT.
// Source: ../infrastructure/webservice/handler.go
//
// Generated by this command:
//
//	mockgen -package mocks -source ../infrastructure/webservice/handler.go -destination mocks/book_controller.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBookController is a mock of BookController interface.
type MockBookController struct {
	ctrl     *gomock.Controller
	recorder *MockBookControllerMockRecorder
}

// MockBookControllerMockRecorder is the mock recorder for MockBookController.
type MockBookControllerMockRecorder struct {
	mock *MockBookController
}

// NewMockBookController creates a new mock instance.
func NewMockBookController(ctrl *gomock.Controller) *MockBookController {
	mock := &MockBookController{ctrl: ctrl}
	mock.recorder = &MockBookControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookController) EXPECT() *MockBookControllerMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookController) CreateBook(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateBook", w, r)
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookControllerMockRecorder) CreateBook(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookController)(nil).CreateBook), w, r)
}

// DeleteBook mocks base method.
func (m *MockBookController) DeleteBook(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteBook", w, r)
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookControllerMockRecorder) DeleteBook(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookController)(nil).DeleteBook), w, r)
}

// GetBook mocks base method.
func (m *MockBookController) GetBook(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBook", w, r)
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookControllerMockRecorder) GetBook(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookController)(nil).GetBook), w, r)
}

// ListBooks mocks base method.
func (m *MockBookController) ListBooks(w http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListBooks", w, arg1)
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookControllerMockRecorder) ListBooks(w, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookController)(nil).ListBooks), w, arg1)
}

// UpdateBook mocks base method.
func (m *MockBookController) UpdateBook(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBook", w, r)
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookControllerMockRecorder) UpdateBook(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookController)(nil).UpdateBook), w, r)
}
