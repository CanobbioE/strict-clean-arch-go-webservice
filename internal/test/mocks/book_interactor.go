// Code generated by MockGen. DO NOT EDIT.
// Source: ../interfaces/controller/book_http_controller.go
//
// Generated by this command:
//
//	mockgen -package mocks -source ../interfaces/controller/book_http_controller.go -destination mocks/book_interactor.go BookInteractor
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	domain "github.com/CanobbioE/strict-clean-arch-go-webservice/internal/domain"
)

// MockBookInteractor is a mock of BookInteractor interface.
type MockBookInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockBookInteractorMockRecorder
}

// MockBookInteractorMockRecorder is the mock recorder for MockBookInteractor.
type MockBookInteractorMockRecorder struct {
	mock *MockBookInteractor
}

// NewMockBookInteractor creates a new mock instance.
func NewMockBookInteractor(ctrl *gomock.Controller) *MockBookInteractor {
	mock := &MockBookInteractor{ctrl: ctrl}
	mock.recorder = &MockBookInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookInteractor) EXPECT() *MockBookInteractorMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookInteractor) CreateBook(book *domain.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookInteractorMockRecorder) CreateBook(book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookInteractor)(nil).CreateBook), book)
}

// DeleteBook mocks base method.
func (m *MockBookInteractor) DeleteBook(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookInteractorMockRecorder) DeleteBook(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookInteractor)(nil).DeleteBook), id)
}

// GetBook mocks base method.
func (m *MockBookInteractor) GetBook(id string) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", id)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookInteractorMockRecorder) GetBook(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookInteractor)(nil).GetBook), id)
}

// ListBooks mocks base method.
func (m *MockBookInteractor) ListBooks() ([]*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks")
	ret0, _ := ret[0].([]*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookInteractorMockRecorder) ListBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookInteractor)(nil).ListBooks))
}

// UpdateBook mocks base method.
func (m *MockBookInteractor) UpdateBook(book *domain.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookInteractorMockRecorder) UpdateBook(book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookInteractor)(nil).UpdateBook), book)
}

// MockBookPresenter is a mock of BookPresenter interface.
type MockBookPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockBookPresenterMockRecorder
}

// MockBookPresenterMockRecorder is the mock recorder for MockBookPresenter.
type MockBookPresenterMockRecorder struct {
	mock *MockBookPresenter
}

// NewMockBookPresenter creates a new mock instance.
func NewMockBookPresenter(ctrl *gomock.Controller) *MockBookPresenter {
	mock := &MockBookPresenter{ctrl: ctrl}
	mock.recorder = &MockBookPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookPresenter) EXPECT() *MockBookPresenterMockRecorder {
	return m.recorder
}

// Present mocks base method.
func (m *MockBookPresenter) Present(book *domain.Book) map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Present", book)
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Present indicates an expected call of Present.
func (mr *MockBookPresenterMockRecorder) Present(book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Present", reflect.TypeOf((*MockBookPresenter)(nil).Present), book)
}

// MockErrorPresenter is a mock of ErrorPresenter interface.
type MockErrorPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockErrorPresenterMockRecorder
}

// MockErrorPresenterMockRecorder is the mock recorder for MockErrorPresenter.
type MockErrorPresenterMockRecorder struct {
	mock *MockErrorPresenter
}

// NewMockErrorPresenter creates a new mock instance.
func NewMockErrorPresenter(ctrl *gomock.Controller) *MockErrorPresenter {
	mock := &MockErrorPresenter{ctrl: ctrl}
	mock.recorder = &MockErrorPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorPresenter) EXPECT() *MockErrorPresenterMockRecorder {
	return m.recorder
}

// Present mocks base method.
func (m *MockErrorPresenter) Present(w http.ResponseWriter, err error, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Present", w, err, code)
}

// Present indicates an expected call of Present.
func (mr *MockErrorPresenterMockRecorder) Present(w, err, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Present", reflect.TypeOf((*MockErrorPresenter)(nil).Present), w, err, code)
}
